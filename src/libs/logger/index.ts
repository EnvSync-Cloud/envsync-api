import { type Bindings, pino } from 'pino';

export enum LogTypes {
	LOGS = 'logs',
	ERROR = 'error',
	CUSTOMOBJ = 'customObj',
}

const init = () => pino();
const Logs = (msg: string) => init().info(msg);
const ErrorLogs = (msg: string) => init().error(msg);

const customLogHandler = (obj: Bindings) => init().child(obj);

/**
 * Function to log the messages
 * @param msg  Message to be logged
 * @param logType Type of log
 * @param generated_by Generated by
 * @returns Log
 */
const infoLogs = (msg: string | Bindings, logType: LogTypes, generated_by: string) => {
	if (
		generated_by &&
		[LogTypes.LOGS, LogTypes.ERROR].includes(logType) &&
		typeof msg === 'string'
	) {
		msg = `[${generated_by}] ` + msg;
	}
	if (logType === LogTypes.LOGS && typeof msg === 'string') return Logs(msg);
	if (logType === LogTypes.ERROR && typeof msg === 'string') return ErrorLogs(msg);
	return customLogHandler(msg as Bindings);
};

export default infoLogs;